#PARSER PQL
#DROPALLQUERIES
#QUERY

playtime = SELECT({predicate = 'timestamp > 10753295594424116 && timestamp < 14879639146403495'}, soccergame)

joinout = ENRICH({minimumSize = 42, PREDICATE = RelationalPredicate('sensorid = sid')},System.metadata, playtime)

only_balls = SELECT({predicate = 'entity = "Ball"'}, joinout)
ballInGoal = SELECT({predicate = '(sens_x > 22560 && sens_x < 29880 && sens_y < -33968 && sens_y > -35000 && sens_z < 2440.0) || (sens_x > 22578 && sens_x < 29898 && sens_y > 33941 && sens_y < 35000 && sens_z < 2440.0)'}, only_balls)

interruption_join = join({predicate = 'timestamp >= start_interruption && timestamp <= end_interruption && playing = true', CARD = 'MANY_ONE'}, ballInGoal, System.interruptions)

all_goals = AGGREGATE({group_by = ['sid'], aggregations=[['first', 'timestamp', 'goal_time', 'timestamp'], ['last', 'timestamp', 'search_time', 'timestamp']]}, interruption_join)
all_goals_without_sid = PROJECT({attributes = ['goal_time', 'search_time']}, all_goals)

///TODO: does not work for goal_2.csv
///TODO: detect middle area by game kick-off position data
only_valid_goals = join({predicate = 'search_time + 3000000000000 >= timestamp && ((sens_y + 1000 >= -2540 && sens_y <= -2540) || (sens_y - 1000 <= -2540 && sens_y >= -2540))'}, all_goals_without_sid, only_balls)

add_last_goal_time = STATEMAP({expressions = ['goal_time', ['__last_1.goal_time', 'last_goal_time'], 'timestamp', 'accel']}, only_valid_goals)
///TODO: there is no data with zero acceleration or speed, minimum accel around 2103465 mikrometer/s^2 => 2,1 m/s^2, avg is 13 m/s^2
///TODO: use proposed way of debs challenge
aggregating_goal_data = COALESCE({predicate='goal_time = last_goal_time', AGGREGATIONS=[['first','goal_time','goal_time'], ['first','timestamp','start_timestamp'], ['last','timestamp','end_timestamp']]}, add_last_goal_time)
ball_more_than_5_seconds_in_middle = SELECT({predicate = 'end_timestamp - start_timestamp > 100000000000'}, aggregating_goal_data)
///TODO: for example, at goal.csv the ball is 0,1s in this area, what to do?
///TODO: therefore the join does not work as well
interruption_after_goal = join({predicate = 'goal_time < start_interruption && end_timestamp > start_interruption && playing = false'}, ball_more_than_5_seconds_in_middle, System.interruptions)

///TODO: test for second half
first_half_time_distinction = SELECT({predicate = 'goal_time < 12557295594424116'}, interruption_after_goal)
goal_time_first_half_in_match_minutes = MAP({expressions = [['(goal_time - 10753295594424116)/60000000000000', 'goal_time']]}, first_half_time_distinction)
second_half_time_distinction = SELECT({predicate = 'goal_time > 13086639146403495'}, interruption_after_goal)
goal_time_second_half_in_match_minutes = MAP({expressions = [['(goal_time - 10753295594424116 - 52934355197938)/60000000000000', 'goal_time']]}, second_half_time_distinction)

merge_half_time_goals = UNION(goal_time_first_half_in_match_minutes, goal_time_second_half_in_match_minutes)

///TODO: really needed? further investigation necessary
goals_only_once = CHANGEDETECT({ATTR = ['goal_time'], heartbeatrate = 100, deliverFirstElement = 'true', tolerance = 0.0}, merge_half_time_goals)
