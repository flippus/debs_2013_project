#PARSER PQL
#DROPALLQUERIES
#QUERY

///@author = Philipp Neugebauer

playtime = SELECT({predicate = 'timestamp > 10753295594424116 && timestamp < 14879639146403495'}, soccergame)

metadata_enrichment = ENRICH({minimumSize = 42, PREDICATE = RelationalPredicate('sensorid = sid')},System.metadata, playtime)

only_balls = SELECT({predicate = 'entity = "Ball"'}, metadata_enrichment)

interruptions_join = join({predicate = 'timestamp >= start_interruption && timestamp <= end_interruption', CARD = 'MANY_ONE'}, only_balls, System.interruptions)

map_parameters_for_computation = STATEMAP({expressions = ['sensorid', ['(timestamp - __last_1.timestamp)/1000000000000', 'time_diff'], 'playing', 'sens_x', 'sens_y', 'timestamp']}, interruptions_join)

ballInFieldX = SELECT({predicate = 'sens_x > -50 && sens_x < 52489'}, map_parameters_for_computation)
ballInFieldXY = SELECT({predicate = 'sens_y > -33939 && sens_y < 33965'}, ballInFieldX)

no_interrupts = SELECT({predicate = 'playing = true'}, ballInFieldXY)

half_time_distinction = SELECT({predicate = 'timestamp > 13086639146403495 || timestamp < 12557295594424116'}, no_interrupts)
half_time_result = MAP({expressions = ['sensorid', 'time_diff', ['eif(timestamp < 12557295594424116, ((timestamp - 10753295594424116)/60000000000000), (timestamp - 10753295594424116 - 529343551979379)/60000000000000))', 'current_minute']]}, half_time_distinction)

aggregations = AGGREGATE({group_by = ['sensorid'], aggregations=[['SUM', 'time_diff', 'ball_time_in_seconds', 'timestamp'], ['LAST', 'current_minute', 'current_minute']]}, half_time_result)
