#PARSER PQL
#DEFINE STARTTS 10748401988186756
#DEFINE OUTPUT \task1.csv
#DROPALLQUERIES
#QUERY

matchstart = SELECT({predicate = 'timestamp > 10753478619424000'}, soccergame)

included_metadata = ENRICH({minimumSize = 42, PREDICATE = RelationalPredicate('sensorid = sid')}, System.metadata, matchstart)

included_interruptions = join({predicate = 'timestamp >= start_interruption && timestamp <= end_interruption && playing == true', CARD = 'MANY_ONE'}, included_metadata, System.interruptions)

///remove referee and goalkeeper hands
without_referee = SELECT({predicate = 'entity_id != 21 && sensorid != 97 && sensorid != 98 && sensorid != 99 && sensorid != 100'}, included_interruptions)

///sensor_data must be inside the game field
inFieldX = SELECT({predicate = 'sens_x > -50 && sens_x < 52489'}, without_referee)
inFieldXY = SELECT({predicate = 'sens_y > -33939 && sens_y < 33965'}, inFieldX)

///TODO: replace both selects by one filter statement?!
ball_events = SELECT({predicate = 'entity = "Ball"'}, inFieldXY)
ball_events_projection = PROJECT({attributes = ['sid', 'timestamp', 'sens_x', 'sens_y', 'sens_z', 'sens_speed', 'accel', 'speed_x', 'speed_y', 'speed_x', 'accel_x', 'accel_y', 'accel_z']}, ball_events)
player_events = SELECT({predicate = 'entity != "Ball"'}, inFieldXY)
player_events_projection = PROJECT({attributes = ['entity', 'sensorid', 'team_id', 'timestamp', 'sens_x', 'sens_y', 'sens_z']}, player_events)
///maybe renaming timestampp to player_time or ball_hit_time
player_events_renaming = RENAME({aliases = ['name', 'player_id', 'team_id', 'timestampp', 'sensor_x', 'sensor_y', 'sensor_z']}, player_events_projection)

previous_ball_event_sid = STATEMAP({expressions = ['sid', ['__last_1.sid', 'last_sid'], 'timestamp', 'sens_x', 'sens_y', 'sens_z', 'sens_speed', 'accel', ['__last_1.accel', 'last_accel'], 'speed_x', 'speed_y', 'speed_x', 'accel_x', 'accel_y', 'accel_z', ['(sens_x > 22578.5 && sens_x < 29898.5 && sens_y = 33941.0 && sens_z < 2440.0) || (sens_x > 22560.0 && sens_x < 29880.0 && sens_y = -33968.0 && sens_z < 2440.0)', 'in_goal_area']]}, ball_events_projection)
///TODO: probably an aggregation first to get the start and end times to compute 0,5s blocks. alternatively a timewindow of 0,5s?
preparing_data_for_goal_shot_detection = COALESCE({predicate='start_timestamp - end_timestamp <= 500000000000 && sid = last_sid && (accel + 10 >= last_accel || accel - 10 <= last_accel) ', AGGREGATIONS=[['first','sid','sid'], ['first','timestamp','start_timestamp'], ['last','timestamp','end_timestamp'], ['count','timestamp','event_count'], ['sum','accel','acceleration_sum'], ['max','in_goal_area','in_goal_area'], ['first','sens_x','sens_x'], ['first','sens_y','sens_y'], ['first','sens_z','sens_z']]}, previous_ball_event_sid)

///TODO: how to differentiate and aggregate 1s and 1,5s with one dataset
///acceleration_computation_preparation = STATEMAP({expressions = ['sid', ['__last_1.sid', 'last_sid'], 'start_timestamp', 'end_timestamp', 'event_count', 'acceleration_sum']}, preparing_data_for_goal_shot_detection)
///acceleration_computation = COALESCE({predicate='end_timestamp + 1000000000 <= start_timestamp && end_timestamp - start_timestamp <= 1000000000000', AGGREGATIONS=[['first','timestamp','start_timestamp'], ['last','timestamp','end_timestamp'], ['count','event_count','event_count']['sum','acceleration_sum','acceleration_sum']}, acceleration_computation_preparation)

///select where acceleration >= 55 m/s^2
sufficient_acceleration = SELECT({predicate = '(acceleration_sum/event_count)/10^10 >= 55'}, preparing_data_for_goal_shot_detection)

///must be in goal area at least in one event
reached_goal_area = SELECT({predicate = 'in_goal_area = true'}, sufficient_acceleration)

///TODO: adapt attribute names from aggregations: actually replace timestamp by start_timestamp
///detect ball shooter
///ball and player are in same area with 1m tolerance and at same time with 1ms tolerance
ball_with_player_at_same_timestamp = join({predicate = '(timestamp + 1000000000 >= timestampp && timestamp <= timestampp) || (timestamp - 1000000000 <= timestampp && timestamp >= timestampp)', CARD = 'ONE_MANY'}, reached_goal_area, player_events_renaming)
ball_with_player_nearby = SELECT({predicate = '((sens_x + 1000 >= sensor_x && sens_x <= sensor_x) || (sens_x - 1000 <= sensor_x && sens_x >= sensor_x)) && ((sens_y + 1000 >= sensor_y && sens_y <= sensor_y) || (sens_y - 1000 <= sensor_y && sens_y >= sensor_y)) && ((sens_z + 1000 >= sensor_z && sens_z <= sensor_z) || (sens_z - 1000 <= sensor_z && sens_z >= sensor_z))'}, ball_with_player_at_same_timestamp)
ball_player_projection = PROJECT({attributes = ['sid', 'timestamp', 'sens_x', 'sens_y', 'sens_z', 'sens_speed', 'accel', 'speed_x', 'speed_y', 'speed_x', 'accel_x', 'accel_y', 'accel_z', 'name', 'player_id', 'team_id', 'timestampp' ]}, ball_with_player_nearby)

///select where player shoots on opponents goal
///TODO: specification (work with match side probably)
///spielfeldmitte ist bei y = 0
///ball_with_halfsides = join({predicate = 'timestamp >= halftime_start && timestamp <= halftime_end'}, ball_player_projection, System.goals)
///only_opponents_shots = SELECT({predicate = 'team_id = 1 && '}, halfside_joined)
