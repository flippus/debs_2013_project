#PARSER PQL
#DROPALLQUERIES
#DOREWRITE false
#QUERY

five_minute_window = TIMEWINDOW({size = 300000000000000}, soccergame)

included_metadata = ENRICH({minimumSize = 42, PREDICATE = RelationalPredicate('sensorid = sid')}, System.metadata, five_minute_window)

included_interruptions = join({predicate = 'timestamp >= start_interruption && timestamp <= end_interruption && playing == true', CARD = 'MANY_ONE'}, included_metadata, System.interruptions)

///remove referee and goalkeeper hands
without_referee = SELECT({predicate = 'entity_id != 21 && sensorid != 97 && sensorid != 98 && sensorid != 99 && sensorid != 100'}, included_interruptions)

///sensor_data must be inside the game field
inFieldX = SELECT({predicate = 'sens_x > -50 && sens_x < 52489'}, without_referee)
inFieldXY = SELECT({predicate = 'sens_y > -33939 && sens_y < 33965'}, inFieldX)

ball_events = SELECT({predicate = 'entity = "Ball"'}, inFieldXY)
ball_events_projection = PROJECT({attributes = ['sid', 'timestamp', 'sens_x', 'sens_y', 'sens_z', 'sens_speed', 'accel', 'speed_x', 'speed_y', 'speed_z', 'accel_x', 'accel_y', 'accel_z']}, ball_events)

///select where acceleration >= 55 m/s^2
last_value_of_time_for_comparison = STATEMAP({expressions = ['sid', 'timestamp', ['__last_30.timestamp', 'comparison_timestamp'], 'sens_x', 'sens_y', ['__last_30.sens_y', 'comparison_sens_y'], 'sens_z', 'sens_speed', ['__last_1.sens_speed', 'last_sens_speed'], ['__last_100.sens_speed', 'last100_sens_speed'], 'accel', 'speed_x', 'speed_y', 'speed_z', 'accel_x', 'accel_y', 'accel_z']}, ball_events_projection)
sufficient_acceleration = MAP({expressions = ['sid', 'timestamp', ['eif(accel >= 55000000, true, false)', 'accelerated'], 'sens_x', 'sens_y', 'sens_z', 'sens_speed', 'last_sens_speed', 'last100_sens_speed', 'accel', 'speed_x', 'speed_y', 'speed_z', 'accel_x', 'accel_y', 'accel_z']}, last_value_of_time_for_comparison)
sufficient_acceleration_detection = CHANGEDETECT({ATTR = ['accelerated'], heartbeatrate = 1000}, TIMEWINDOW({size = 1, advance = 1}, sufficient_acceleration))

player_events = SELECT({predicate = 'entity != "Ball"'}, inFieldXY)
player_events_projection = PROJECT({attributes = ['entity', 'sensorid', 'team_id', 'timestamp', 'sens_x', 'sens_y', 'sens_z']}, player_events)
player_events_renaming = RENAME({aliases = ['name', 'player_id', 'team_id', 'player_hit_timestamp', 'sensor_x', 'sensor_y', 'sensor_z']}, player_events_projection)

///detect ball shooter
///ball and player are in same area with 1m tolerance and at same time with 1ms tolerance
ball_with_player_at_same_timestamp = join({predicate = '(timestamp + 1000000000 >= player_hit_timestamp && timestamp <= player_hit_timestamp) || (timestamp - 1000000000 <= player_hit_timestamp && timestamp >= player_hit_timestamp)', CARD = 'ONE_MANY'}, sufficient_acceleration_detection, player_events_renaming)
ball_with_player_nearby = SELECT({predicate = '((sens_x + 1000 >= sensor_x && sens_x <= sensor_x) || (sens_x - 1000 <= sensor_x && sens_x >= sensor_x)) && ((sens_y + 1000 >= sensor_y && sens_y <= sensor_y) || (sens_y - 1000 <= sensor_y && sens_y >= sensor_y)) && ((sens_z + 1000 >= sensor_z && sens_z <= sensor_z) || (sens_z - 1000 <= sensor_z && sens_z >= sensor_z))'}, ball_with_player_at_same_timestamp)
ball_player_projection = PROJECT({attributes = ['sid', 'timestamp', 'sens_x', 'sens_y', 'name', 'player_id', 'team_id', 'sens_speed', 'last_sens_speed', 'last10_sens_speed', 'speed_x', 'speed_y', 'sensor_x', 'sensor_y']}, ball_with_player_nearby)

///select where player shoots on opponents goal and to exclude return passes by using team_id and timestamp to identify the sides. y > 0 means left side and vice versa
ball_with_halfsides = join({predicate = 'timestamp >= halftime_start && timestamp <= halftime_end && team_id = team'}, ball_player_projection, System.goals)
only_opponents_shots = SELECT({predicate = '(side = "right" && sens_y > 0) || (side = "left" && sens_y < 0)'}, ball_with_halfsides)

ball_player_remove_useless_attributes = PROJECT({attributes = ['sid', 'timestamp', 'team_id', 'sens_x', 'sens_y', 'name', 'player_id', 'sens_speed', 'last_sens_speed', 'last10_sens_speed', 'speed_x', 'speed_y', 'sensor_x', 'sensor_y']}, only_opponents_shots)
ball_player_renaming = RENAME({aliases = ['sensorid', 'ball_hit_timestamp', 'team_id', 'sens_x', 'sens_y', 'name', 'player_id', 'sens_speed', 'last_sens_speed', 'last10_sens_speed', 'speed_x', 'speed_y', 'sensor_x', 'sensor_y']}, ball_player_remove_useless_attributes)

all_possible_goal_shots_with_events = join({predicate = 'timestamp + 1500000000 >= ball_hit_timestamp && sensorid = sid'}, ball_player_renaming, sufficient_acceleration_detection)

///aggregate the values required for the goal shot computation, like acceleration and events. Save the other values by using the first statement which are required for data presentation and further computation.
///TODO: check for computation errors
///TODO: (sens_speed * speed_l)/10^3 oder 10^6
///TODO: less random speed change values
preparing_data_for_reached_goal_area = COALESCE({predicate='sens_speed - 1000000 <= last_sens_speed && sens_speed - 2000000 <= last10_sens_speed', AGGREGATIONS=[['first','sid','sensorid'], ['first','sens_x','sens_x'], ['first','sens_y','sens_y'], ['first','ball_hit_timestamp','ball_hit_timestamp'], ['last','ball_hit_timestamp','ball_hit_timestamp2'], ['first','name','name'], ['first','player_id','player_id'], ['first','team_id','team_id'], ['avg', 'sens_speed', 'sens_speed'], ['avg', 'speed_x', 'speed_x'], ['avg', 'speed_y', 'speed_y']]}, all_possible_goal_shots_with_events)
reached_goal_area = SELECT({predicate = '((26229 - sens_x)/((sens_speed * speed_x)/10000000))/1000 <= 1,5 && (((-33968 - sens_y)/((sens_speed * speed_y)/10000000))/1000 <= 1,5 || ((33941 - sens_y)/((sens_speed * speed_y)/10000000))/1000 <= 1,5) && ((((26229 - sens_x)/((sens_speed * speed_x)/10000000))/1000 = (-33968 - sens_y)/((sens_speed * speed_y)/10000000))/1000 || ((26229 - sens_x)/((sens_speed * speed_x)/10000000))/1000 = ((33941 - sens_y)/((sens_speed * speed_y)/10000000))/1000)'}, preparing_data_for_reached_goal_area)

improve_result_presentation = PROJECT({attributes = ['ball_hit_timestamp', 'sens_x', 'sens_y', 'name', 'player_id', 'team_id']}, reached_goal_area)
///TODO: add second half distinction
improve_time_representation = STATEMAP({expressions = [['(ball_hit_timestamp - 10753295594424116)/60000000000000', 'ball_hit_timestamp'], ['(__last_1.ball_hit_timestamp - 10753295594424116)/60000000000000', 'last_ball_hit_timestamp'], 'name', ['__last_1.name', 'last_name'], 'player_id', 'team_id', 'sens_x', 'sens_y']}, improve_result_presentation)
goals_shot_result = COALESCE({predicate='ball_hit_timestamp - last_ball_hit_timestamp <= 1 && name == last_name', AGGREGATIONS=[['first','ball_hit_timestamp','ball_hit_timestamp'], ['first','name', 'name'], ['first','player_id','player_id'], ['first','team_id','team_id'], ['first','sens_x','sens_x'], ['first','sens_y','sens_y']]}, improve_time_representation)

///TODO: negate all coalesce predicates
