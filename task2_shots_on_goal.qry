#PARSER PQL
#DEFINE STARTTS 10748401988186756
#DEFINE OUTPUT \task1.csv
#DROPALLQUERIES
#QUERY

matchstart = SELECT({predicate = 'timestamp > 10753478619424000'}, soccergame)

included_metadata = ENRICH({minimumSize = 42, PREDICATE = RelationalPredicate('sensorid = sid')}, System.metadata, matchstart)

included_interruptions = join({predicate = 'timestamp >= start_interruption && timestamp <= end_interruption && playing == true', CARD = 'MANY_ONE'}, included_metadata, System.interruptions)

///remove referee and goalkeeper hands
without_referee = SELECT({predicate = 'entity_id != 21 && sensorid != 97 && sensorid != 98 && sensorid != 99 && sensorid != 100'}, included_interruptions)

///detect ball hits
///ball and player are in same area at same time with 1m tolerance
inFieldX = SELECT({predicate = 'sens_x > -50 && sens_x < 52489'}, without_referee)
inFieldXY = SELECT({predicate = 'sens_y > -33939 && sens_y < 33965'}, inFieldX)

///TODO: replace both selects by one filter statement?!
ball_events = SELECT({predicate = 'entity = "Ball"'}, inFieldXY)
ball_events_projection = PROJECT({attributes = ['sid', 'timestamp', 'sens_x', 'sens_y', 'sens_z', 'sens_speed', 'accel', 'speed_x', 'speed_y', 'speed_x', 'accel_x', 'accel_y', 'accel_z']}, ball_events)
player_events = SELECT({predicate = 'entity != "Ball"'}, inFieldXY)
player_events_projection = PROJECT({attributes = ['entity', 'sensorid', 'team_id', 'timestamp', 'sens_x', 'sens_y', 'sens_z']}, player_events)
///maybe renaming timestampp to player_time or ball_hit_time
player_events_renaming = RENAME({aliases = ['name', 'player_id', 'team_id', 'timestampp', 'sensor_x', 'sensor_y', 'sensor_z']}, player_events_projection)

///TODO: add goal_area check for every value
/// 0 inside
/// 1 outside
///search for min
previous_ball_event_sid = STATEMAP({expressions = ['sid', ['__last_1.sid', 'last_sid'], 'timestamp', 'sens_x', 'sens_y', 'sens_z', 'sens_speed', 'accel', ['__last_1.accel', 'last_accel'], 'speed_x', 'speed_y', 'speed_x', 'accel_x', 'accel_y', 'accel_z']}, ball_events_projection)
///TODO: how to preserve attributes in an aggregation command: take first e.g.
preparing_data_for_goal_shot_detection = COALESCE({predicate='start_timestamp - end_timestamp <= 500000000000 && sid = last_sid && (accel + 10 >= last_accel || accel - 10 <= last_accel) ', AGGREGATIONS=[['first','sid','sid'], ['first','timestamp','start_timestamp'], ['last','timestamp','end_timestamp'], ['count','timestamp','event_count']['sum','accel','acceleration_sum']}, previous_ball_event_sid)

///TODO: how to differentiate and aggregate 1s and 1,5s with one dataset
///acceleration_computation_preparation = STATEMAP({expressions = ['sid', ['__last_1.sid', 'last_sid'], 'start_timestamp', 'end_timestamp', 'event_count', 'acceleration_sum']}, preparing_data_for_goal_shot_detection)
///acceleration_computation = COALESCE({predicate='end_timestamp + 1000000000 <= start_timestamp && end_timestamp - start_timestamp <= 1000000000000', AGGREGATIONS=[['first','timestamp','start_timestamp'], ['last','timestamp','end_timestamp'], ['count','event_count','event_count']['sum','acceleration_sum','acceleration_sum']}, acceleration_computation_preparation)

///aggregation of ball movement to compute acceleration >= 55 m/s^2
/// by adding the different acceleration values and compute an average?
/// does the direction count for this? probably not?! so just |a| converted to m/s^2 ?
sufficient_acceleration = SELECT({predicate = '(acceleration_sum/event_count)/10^10 >= 55'}, preparing_data_for_goal_shot_detection)

///does ball reach goal area within 1,5s
///needs to check every value because it could be blocked before the 1,5s
///TODO: see above goal_area check

///check if ball leaves field or can't hit goal area anymore due to direction change
///check if the field borders are crossed?! select probably doesn't work, maybe the coalesce operator?!
///check direction changes by detecting acceleration changes?!
///TODO: how to finish and go to the next goal shot?!
///TODO: more detailed specification

///select where player shoots on opponents goal
///TODO: specification (work with match side probably)
///spielfeldmitte ist bei y = 0
///remove goal shot if goalkeeper of same team is last man touching the ball
///ball_with_halfsides = join({predicate = 'timestamp >= halftime_start && timestamp <= halftime_end'}, ball_player_projection, System.goals)
///only_opponents_shots = SELECT({predicate = 'team_id = 1 && '}, halfside_joined)
